name: Build container

on:
  workflow_dispatch:
    inputs:
      target:
        description: target to build (see README)
        required: true
        type: choice
        options:
        - scilus
        - scilpy
        - dmriqcpy
        - scilus-flows
        - actions-runner
      tag:
        description: tag to create for the image built
        required: true
        type: string
      update-latest:
        description: also push the latest tag in addition to the current one
        required: false
        type: boolean
        default: false
      disable-builddate-tag:
        description: disable pushing stamped tag (suffixed with timestamp -YYYYMMDD)
        required: false
        type: boolean
        default: false
      scilpy-version:
        description: scilpy version (release or branch name)
        required: false
        type: string
      dmriqcpy-version:
        description: dmriqcpy version (release or branch name)
        required: false
        type: string
      actions-runner-version:
        description: version for github actions runner (on ghcr.io)
        required: false
        type: string
      scilus-dependencies-tag:
        description: tag to fetch from dockerhub for scilus dependencies (base for scilus image)
        required: false
        type: string
        default: latest
      scilus-for-scilus-flows-tag:
        description: tag to fetch from dockerhub for scilus (base for scilus-flows)
        required: false
        type: string
        default: latest
      build-system-ref:
        description: github reference of the build system to checkout
        required: false
        type: string
        default: main
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      tag:
        required: false
        type: string
      update-latest:
        required: false
        type: boolean
        default: false
      disable-builddate-tag:
        required: false
        type: boolean
        default: false
      scilpy-version:
        required: false
        type: string
      dmriqcpy-version:
        required: false
        type: string
      python-version:
        required: false
        type: string
      vtk-version:
        required: false
        type: string
      nextflow-version:
        required: false
        type: string
      base-install-image:
        required: false
        type: string
      tractoflow-version:
        required: false
        type: string
      dmriqc-flow-version:
        required: false
        type: string
      extractor-flow-version:
        required: false
        type: string
      rbx-flow-version:
        required: false
        type: string
      tractometry-flow-version:
        required: false
        type: string
      register-flow-version:
        required: false
        type: string
      disconets-flow-version:
        required: false
        type: string
      freewater-flow-version:
        required: false
        type: string
      noddi-flow-version:
        required: false
        type: string
      bst-flow-version:
        required: false
        type: string
      actions-runner-version:
        required: false
        type: string
      build-system-ref:
        required: false
        type: string
        default: main
    secrets:
      DOCKER_USERNAME:
        description: 'Image repository on dockerhub to which to push'
        required: true
      DOCKER_PASSWORD:
        description: 'Access token for dockerhub push'
        required: true

jobs:
  build-container:
    runs-on: scilus-docker-builders
    steps:
      -
        name: Validate input parameters
        run: |
          if [ "${{ inputs.target }}" = "scilus-base" ]
          then
            echo "::error file=docker-builder.yml,line=109,title=scilus-base build::Github builder does not support building scilus-base for now"
          fi
      -
        name: Checkout build system
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/containers-scilus
          ref: ${{ inputs.build-system-ref }}
      -
        name: Resolve versioning from workflow inputs
        id: local-versioning
        run: |
          touch local-versioning.hcl
          function version () { [ -z "$1" ] || { echo "${2}=\"${1}\"" >> local-versioning.hcl } }

          echo "dockerhub-user-pull=\"${{ secrets.DOCKER_USERNAME }}\"" >> local-versioning.hcl
          echo "dockerhub-user-push=\"${{ secrets.DOCKER_USERNAME }}\"" >> local-versioning.hcl

          version "${{ inputs.scilpy-version }}" scilpy-version
          version "${{ inputs.dmriqcpy-version }}" dmriqcpy-version
          version "${{ inputs.nextflow-version }}" nextflow-version
          version "${{ inputs.tractoflow-version }}" tractoflow-version
          version "${{ inputs.dmriqc-flow-version }}" dmriqc-flow-version
          version "${{ inputs.extractor-flow-version }}" extractor-flow-version
          version "${{ inputs.rbx-flow-version }}" rbx-flow-version
          version "${{ inputs.tractometry-flow-version }}" tractometry-flow-version
          version "${{ inputs.register-flow-version }}" register-flow-version
          version "${{ inputs.disconets-flow-version }}" disconets-flow-version
          version "${{ inputs.freewater-flow-version }}" freewater-flow-version
          version "${{ inputs.noddi-flow-version }}" noddi-flow-version
          version "${{ inputs.bst-flow-version }}" bst-flow-version
          version "${{ inputs.actions-runner-version }}" actions-runner-version

          echo "DEPS_TAG=\"${{ inputs.scilus-dependencies-tag }}\"" >> local-versioning.hcl
          [ "${{ inputs.target }}" == "scilus-flows" ] && {
              version "${{ inputs.scilus-for-scilus-flows-tag }}" SCILUS_TAG
          }

          vtk_version=$(cat versioning.hcl | grep vtk-version | cut -d "=" -f2)
          vtk_version=$(echo $vtk_version | tr -d " " | tr -d "\"")
          ACR_TAG=${{ inputs.actions-runner-version }}-vtk${vtk_version}
          [ -z "${{ inputs.actions-runner-version }}" ] || { version "$ACR_TAG" ACR_TAG }

          echo "bake-file=$PWD/local-versioning.hcl" >> $GITHUB_OUTPUT
      -
        name: Set output image tags and registry to publish to
        id: dockerhub-tags
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ inputs.target }}
        run: |
          touch tag-publishing
          echo "${{ inputs.target }}.output=type=registry" >> tag-publishing

          [ -z ${{ inputs.tag }} ] || {
              echo "${{ inputs.target }}.tags=${{ env.IMAGE }}:${{ inputs.tag }}" >> tag-publishing
          }

          [ "${{ inputs.disable-builddate-tag }}" != "true" ] && {
              echo "${{ inputs.target }}.tags=${{ env.IMAGE }}-$(date +'%Y%m%d')" >> tag-publishing
          }

          [ "${{ inputs.update-latest }}" == "true" ] && {
              echo "${{ inputs.target }}.tags=${{ env.IMAGE }}:latest" >> tag-publishing
          }

          DELIM="$(echo $RANDOM | base64 | head -c 3; echo)"
          echo "tags-file=$PWD/tag-publishing" >> $GITHUB_OUTPUT
          echo "tags-string<<$DELIM" >> $GITHUB_OUTPUT
          echo "$(cat $PWD/tag-publishing)" >> $GITHUB_OUTPUT
          echo "$DELIM" >> $GITHUB_OUTPUT
          echo "git-output=$GITHUB_OUTPUT" >> $GITHUB_OUTPUT
      -
        name: Upload versioning and caching hcl as artifacts
        uses: actions/upload-artifact@v3.1.1
        with:
          name: HCL artifacts
          path: |
            ${{ steps.local-versioning.outputs.bake-file }}
            ${{ steps.dockerhub-tags.outputs.tags-file }}
            ${{ steps.dockerhub-tags.outputs.git-output }}
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.11.0
          driver-opts: |
            image=moby/buildkit:v0.11.6
      -
        name: Build container
        id: container-build
        uses: docker/bake-action@v3.1.0
        with:
          targets: |
            ${{ inputs.target }}
          files: |
            ${{ steps.local-versioning.outputs.bake-file }}
            ./versioning.hcl
            ./docker-bake.hcl
          set: ${{ steps.dockerhub-tags.outputs.tags-string }}
          push: false
      -
        name: Save output container metadata to file
        id: container-metadata
        run: |
          echo "${{ steps.container-build.outputs.metadata }}" >> container-metadata.json
          echo "metadata=$PWD/container-metadata.json" >> $GITHUB_OUTPUT
      -
        name: Upload bake definition
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Baking artifacts
          path: |
            ${{ steps.container-metadata.outputs.metadata }}
