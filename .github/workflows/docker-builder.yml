name: Build container

on:
  workflow_dispatch:
    inputs:
      target:
        description: target to build (see README)
        required: true
        type: choice
        options:
        - scilus
        - scilpy
        - dmriqcpy
        - scilus-flows 
      tag:
        description: tag to create for the image built
        required: true
        type: string
      update-latest:
        description: also push the latest tag in addition to the current one
        required: false
        type: boolean
        default: false
      scilpy-version:
        description: scilpy version (release or branch name)
        required: false
        type: string
      dmriqcpy-version:
        description: dmriqcpy version (release or branch name)
        required: false
        type: string
      python-version:
        description: python version (format X.X, must be available through base OS default ppa, see REAMDE)
        required: false
        type: string
      vtk-version:
        description: vtk version, from kitwake repository (format X.X.X)
        required: false
        type: string
      nextflow-version:
        description: nextflow version (format X.X.X)
        required: false
        type: string
      base-python-image:
        description: base python image to get from dockerhub
        required: false
        type: string
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      tag:
        required: true
        type: string
      update-latest:
        required: false
        type: boolean
        default: false
      scilpy-version:
        required: false
        type: string
      dmriqcpy-version:
        required: false
        type: string
      python-version:
        required: false
        type: string
      vtk-version:
        required: false
        type: string
      nextflow-version:
        required: false
        type: string
      base-python-image:
        required: false
        type: string
      tractoflow-version:
        required: false
        type: string
      dmriqc-flow-version:
        required: false
        type: string
      extractor-flow-version:
        required: false
        type: string
      rbx-flow-version:
        required: false
        type: string
      tractometry-flow-version:
        required: false
        type: string
      register-flow-version:
        required: false
        type: string
      disconets-flow-version:
        required: false
        type: string
      freewater-flow-version:
        required: false
        type: string
      noddi-flow-version:
        required: false
        type: string
      bst-flow-version:
        required: false
        type: string
    secrets:
      DOCKER_USERNAME:
        description: 'Image repository on dockerhub to which to push'
        required: true
      DOCKER_PASSWORD:
        description: 'Access token for dockerhub push'
        required: true

jobs:
  build-container:
    runs-on: ubuntu-latest
    steps:
      -
        name: Validate input parameters
        run: |
          if [ "${{ inputs.target }}" = "scilus-base" ]
          then
            echo "::error file=docker-builder.yml,line=109,title=scilus-base build::Github builder does not support building scilus-base for now"
          fi
      -
        name: Checkout build system
        uses: actions/checkout@v2
        with:
          repository: AlexVCaron/containers-scilus
          ref: develop
      -
        name: Resolve versioning from workflow inputs
        id: local-versioning
        run: |
          touch local-versioning.hcl
          [ -z "${{ inputs.scilpy-version }}" ]            || echo "scilpy-version=\"${{ inputs.scilpy-version }}\""                       >> local-versioning.hcl
          [ -z "${{ inputs.dmriqcpy-version }}" ]          || echo "dmriqcpy-version=\"${{ inputs.dmriqcpy-version }}\""                   >> local-versioning.hcl
          [ -z "${{ inputs.python-version }}" ]            || echo "python-version=\"${{ inputs.python-version }}\""                       >> local-versioning.hcl
          [ -z "${{ inputs.vtk-version }}" ]               || echo "vtk-version=\"${{ inputs.vtk-version }}\""                             >> local-versioning.hcl
          [ -z "${{ inputs.nextflow-version }}" ]          || echo "nextflow-version=\"${{ inputs.nextflow-version }}\""                   >> local-versioning.hcl
          [ -z "${{ inputs.base-python-image }}" ]         || echo "base-python-image=\"${{ inputs.base-python-image }}\""                 >> local-versioning.hcl
          [ -z "${{ inputs.tractoflow-version }}" ]        || echo "tractoflow-version=\"${{ inputs.tractoflow-version }}\""               >> local-versioning.hcl
          [ -z "${{ inputs.dmriqc-flow-version }}" ]       || echo "dmriqc-flow-version=\"${{ inputs.dmriqc-flow-version }}\""             >> local-versioning.hcl
          [ -z "${{ inputs.extractor-flow-version }}" ]    || echo "extractor-flow-version=\"${{ inputs.extractor-flow-version }}\""       >> local-versioning.hcl
          [ -z "${{ inputs.rbx-flow-version }}" ]          || echo "rbx-flow-version=\"${{ inputs.rbx-flow-version }}\""                   >> local-versioning.hcl
          [ -z "${{ inputs.tractometry-flow-version }}" ]  || echo "tractometry-flow-version=\"${{ inputs.tractometry-flow-version }}\""   >> local-versioning.hcl
          [ -z "${{ inputs.register-flow-version }}" ]     || echo "register-flow-version=\"${{ inputs.register-flow-version }}\""         >> local-versioning.hcl
          [ -z "${{ inputs.disconets-flow-version }}" ]    || echo "disconets-flow-version=\"${{ inputs.disconets-flow-version }}\""       >> local-versioning.hcl
          [ -z "${{ inputs.freewater-flow-version }}" ]    || echo "freewater-flow-version=\"${{ inputs.freewater-flow-version }}\""       >> local-versioning.hcl
          [ -z "${{ inputs.noddi-flow-version }}" ]        || echo "noddi-flow-version=\"${{ inputs.noddi-flow-version }}\""               >> local-versioning.hcl
          [ -z "${{ inputs.bst-flow-version }}" ]          || echo "bst-flow-version=\"${{ inputs.bst-flow-version }}\""                   >> local-versioning.hcl
          echo "bake-file=$PWD/local-versioning.hcl" >> $GITHUB_OUTPUT
      -
        name: Bind dockerhub image cache
        id: dockerhub-cache
        run: |
          cat <<EOT >> cache-bindings.hcl
          target "scilus"          { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus"]          }
          target "scilus-base"     { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus-base"]     }
          target "scilpy"          { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilpy"]          }
          target "dmriqcpy"        { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:dmriqcpy"]        }
          target "vtk"             { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:vtk"]             }
          target "scilus-python"   { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus-python"]   }
          target "scilus-scilpy"   { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus-scilpy"]   }
          target "scilus-nextflow" { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus-nextflow"] }
          target "scilus-vtk"      { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus-vtk"]      }
          target "scilus-flows"    { cache-to = ["type=registry,mode=max,ref=${{ secrets.DOCKER_USERNAME }}/build-cache:scilus-flows"]    }
          EOT
          echo "bake-file=$PWD/cache-bindings.hcl" >> $GITHUB_OUTPUT
      -
        name: Set output image tags and registry to publish to
        id: dockerhub-tags
        run: |
          touch tag-publishing.json
          echo -n "[\"${{ inputs.target }}.tags=${{ secrets.DOCKER_USERNAME }}/${{ inputs.target }}:${{ inputs.tag }}\"," >> tag-publishing.json
          [ "${{ inputs.update-latest }}" == "true" ] && echo -n "\"${{ inputs.target }}.tags=${{ secrets.DOCKER_USERNAME }}/${{ inputs.target }}:latest\"," >> tag-publishing.json
          echo -n "\"${{ inputs.target }}.output=type=registry\"]" >> tag-publishing.json
          echo "tags-file=$PWD/tag-publishing.json" >> $GITHUB_OUTPUT
          echo "tags-string=$(cat $PWD/tag-publishing.json)" >> $GITHUB_OUTPUT
      -
        name: Upload versioning and caching hcl as artifacts
        uses: actions/upload-artifact@v3.1.1
        with:
          name: HCL artifacts
          path: |
            ${{ steps.dockerhub-cache.outputs.bake-file }}
            ${{ steps.local-versioning.outputs.bake-file }}
            ${{ steps.dockerhub-tags.outputs.tags-file }}
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1
          driver-opts: |
            image=moby/buildkit:v0.10.6
      -
        name: Build container
        id: container-build
        uses: docker/bake-action@v2.3.0
        with:
          targets: |
            ${{ inputs.target }}
          files: |
            ${{ steps.dockerhub-cache.outputs.bake-file }}
            ${{ steps.local-versioning.outputs.bake-file }}
            ./versioning/${{ inputs.target }}-versioning.hcl
            ./docker-bake.hcl
          set: ${{ fromJson(steps.dockerhub-tags.outputs.tags-string) }}
          push: true
      -
        name: Upload bake definition
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Baking artifacts
          path: |
            ${{ steps.container-build.outputs.metadata }}
